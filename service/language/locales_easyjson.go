// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package language

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage(in *jlexer.Lexer, out *langPackage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(langPackage, 0, 1)
			} else {
				*out = langPackage{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Message
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage(out *jwriter.Writer, in langPackage) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v langPackage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v langPackage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *langPackage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *langPackage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage(l, v)
}
func easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage1(in *jlexer.Lexer, out *Var) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "plural":
			(out.Plural).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage1(out *jwriter.Writer, in Var) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"plural\":"
		out.RawString(prefix)
		(in.Plural).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Var) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Var) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Var) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Var) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage1(l, v)
}
func easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage2(in *jlexer.Lexer, out *Plural) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "arg":
			out.Arg = int(in.Int())
		case "format":
			out.Format = string(in.String())
		case "cases":
			if in.IsNull() {
				in.Skip()
				out.Cases = nil
			} else {
				in.Delim('[')
				if out.Cases == nil {
					if !in.IsDelim(']') {
						out.Cases = make([]Case, 0, 2)
					} else {
						out.Cases = []Case{}
					}
				} else {
					out.Cases = (out.Cases)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Case
					(v4).UnmarshalEasyJSON(in)
					out.Cases = append(out.Cases, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage2(out *jwriter.Writer, in Plural) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"arg\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Arg))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"cases\":"
		out.RawString(prefix)
		if in.Cases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Cases {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plural) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plural) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plural) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plural) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage2(l, v)
}
func easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage3(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
				out.Vars = nil
			} else {
				in.Delim('[')
				if out.Vars == nil {
					if !in.IsDelim(']') {
						out.Vars = make([]Var, 0, 1)
					} else {
						out.Vars = []Var{}
					}
				} else {
					out.Vars = (out.Vars)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Var
					(v7).UnmarshalEasyJSON(in)
					out.Vars = append(out.Vars, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage3(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"vars\":"
		out.RawString(prefix)
		if in.Vars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Vars {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage3(l, v)
}
func easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage4(in *jlexer.Lexer, out *Case) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cond":
			out.Cond = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage4(out *jwriter.Writer, in Case) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cond\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cond))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Case) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Case) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20afa917EncodeTelegramSplatoon2BotServiceLanguage4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Case) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Case) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20afa917DecodeTelegramSplatoon2BotServiceLanguage4(l, v)
}
