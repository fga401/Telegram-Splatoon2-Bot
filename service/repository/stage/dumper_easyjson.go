// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package stage

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	nintendo "telegram-splatoon2-bot/service/nintendo"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositoryStage(in *jlexer.Lexer, out *stageCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(stageCollection)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 nintendo.Stage
			easyjson1870c743DecodeTelegramSplatoon2BotServiceNintendo(in, &v1)
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositoryStage(out *jwriter.Writer, in stageCollection) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			easyjson1870c743EncodeTelegramSplatoon2BotServiceNintendo(out, v2Value)
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v stageCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositoryStage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stageCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositoryStage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stageCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositoryStage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stageCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositoryStage(l, v)
}
func easyjson1870c743DecodeTelegramSplatoon2BotServiceNintendo(in *jlexer.Lexer, out *nintendo.Stage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1870c743EncodeTelegramSplatoon2BotServiceNintendo(out *jwriter.Writer, in nintendo.Stage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}
