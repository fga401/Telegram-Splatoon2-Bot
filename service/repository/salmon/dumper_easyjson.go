// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package salmon

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	nintendo2 "telegram-splatoon2-bot/service/nintendo"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon(in *jlexer.Lexer, out *weaponCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(weaponCollection)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 *nintendo2.SalmonWeaponType
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(nintendo2.SalmonWeaponType)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon(out *jwriter.Writer, in weaponCollection) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			if v2Value == nil {
				out.RawString("null")
			} else {
				(*v2Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v weaponCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v weaponCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *weaponCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *weaponCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon(l, v)
}
func easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon1(in *jlexer.Lexer, out *stageCollection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(stageCollection)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v3 *nintendo2.SalmonStage
			if in.IsNull() {
				in.Skip()
				v3 = nil
			} else {
				if v3 == nil {
					v3 = new(nintendo2.SalmonStage)
				}
				(*v3).UnmarshalEasyJSON(in)
			}
			(*out)[key] = v3
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon1(out *jwriter.Writer, in stageCollection) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in {
			if v4First {
				v4First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v4Name))
			out.RawByte(':')
			if v4Value == nil {
				out.RawString("null")
			} else {
				(*v4Value).MarshalEasyJSON(out)
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v stageCollection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stageCollection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1870c743EncodeTelegramSplatoon2BotServiceRepositorySalmon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stageCollection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stageCollection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1870c743DecodeTelegramSplatoon2BotServiceRepositorySalmon1(l, v)
}
