// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sendmediagroup

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel(in *jlexer.Lexer, out *InputMediaVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(string)
				}
				*out.Thumb = string(in.String())
			}
		case "caption":
			if in.IsNull() {
				in.Skip()
				out.Caption = nil
			} else {
				if out.Caption == nil {
					out.Caption = new(string)
				}
				*out.Caption = string(in.String())
			}
		case "parse_mode":
			if in.IsNull() {
				in.Skip()
				out.ParseMode = nil
			} else {
				if out.ParseMode == nil {
					out.ParseMode = new(string)
				}
				*out.ParseMode = string(in.String())
			}
		case "width":
			if in.IsNull() {
				in.Skip()
				out.Width = nil
			} else {
				if out.Width == nil {
					out.Width = new(int)
				}
				*out.Width = int(in.Int())
			}
		case "height":
			if in.IsNull() {
				in.Skip()
				out.Height = nil
			} else {
				if out.Height == nil {
					out.Height = new(int)
				}
				*out.Height = int(in.Int())
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(int)
				}
				*out.Duration = int(in.Int())
			}
		case "supports_streaming":
			if in.IsNull() {
				in.Skip()
				out.SupportsStreaming = nil
			} else {
				if out.SupportsStreaming == nil {
					out.SupportsStreaming = new(bool)
				}
				*out.SupportsStreaming = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel(out *jwriter.Writer, in InputMediaVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		out.String(string(*in.Thumb))
	}
	if in.Caption != nil {
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(*in.Caption))
	}
	if in.ParseMode != nil {
		const prefix string = ",\"parse_mode\":"
		out.RawString(prefix)
		out.String(string(*in.ParseMode))
	}
	if in.Width != nil {
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(*in.Width))
	}
	if in.Height != nil {
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(*in.Height))
	}
	if in.Duration != nil {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(*in.Duration))
	}
	if in.SupportsStreaming != nil {
		const prefix string = ",\"supports_streaming\":"
		out.RawString(prefix)
		out.Bool(bool(*in.SupportsStreaming))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel(l, v)
}
func easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel1(in *jlexer.Lexer, out *InputMediaPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "caption":
			if in.IsNull() {
				in.Skip()
				out.Caption = nil
			} else {
				if out.Caption == nil {
					out.Caption = new(string)
				}
				*out.Caption = string(in.String())
			}
		case "parse_mode":
			if in.IsNull() {
				in.Skip()
				out.ParseMode = nil
			} else {
				if out.ParseMode == nil {
					out.ParseMode = new(string)
				}
				*out.ParseMode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel1(out *jwriter.Writer, in InputMediaPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	if in.Caption != nil {
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(*in.Caption))
	}
	if in.ParseMode != nil {
		const prefix string = ",\"parse_mode\":"
		out.RawString(prefix)
		out.String(string(*in.ParseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel1(l, v)
}
func easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel2(in *jlexer.Lexer, out *InputMediaDocument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(string)
				}
				*out.Thumb = string(in.String())
			}
		case "caption":
			if in.IsNull() {
				in.Skip()
				out.Caption = nil
			} else {
				if out.Caption == nil {
					out.Caption = new(string)
				}
				*out.Caption = string(in.String())
			}
		case "parse_mode":
			if in.IsNull() {
				in.Skip()
				out.ParseMode = nil
			} else {
				if out.ParseMode == nil {
					out.ParseMode = new(string)
				}
				*out.ParseMode = string(in.String())
			}
		case "disable_content_type_detection":
			if in.IsNull() {
				in.Skip()
				out.DisableContentTypeDetection = nil
			} else {
				if out.DisableContentTypeDetection == nil {
					out.DisableContentTypeDetection = new(bool)
				}
				*out.DisableContentTypeDetection = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel2(out *jwriter.Writer, in InputMediaDocument) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		out.String(string(*in.Thumb))
	}
	if in.Caption != nil {
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(*in.Caption))
	}
	if in.ParseMode != nil {
		const prefix string = ",\"parse_mode\":"
		out.RawString(prefix)
		out.String(string(*in.ParseMode))
	}
	if in.DisableContentTypeDetection != nil {
		const prefix string = ",\"disable_content_type_detection\":"
		out.RawString(prefix)
		out.Bool(bool(*in.DisableContentTypeDetection))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaDocument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaDocument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaDocument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaDocument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel2(l, v)
}
func easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel3(in *jlexer.Lexer, out *InputMediaAudio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "media":
			out.Media = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(string)
				}
				*out.Thumb = string(in.String())
			}
		case "caption":
			if in.IsNull() {
				in.Skip()
				out.Caption = nil
			} else {
				if out.Caption == nil {
					out.Caption = new(string)
				}
				*out.Caption = string(in.String())
			}
		case "parse_mode":
			if in.IsNull() {
				in.Skip()
				out.ParseMode = nil
			} else {
				if out.ParseMode == nil {
					out.ParseMode = new(string)
				}
				*out.ParseMode = string(in.String())
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(int)
				}
				*out.Duration = int(in.Int())
			}
		case "performer":
			if in.IsNull() {
				in.Skip()
				out.Performer = nil
			} else {
				if out.Performer == nil {
					out.Performer = new(string)
				}
				*out.Performer = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel3(out *jwriter.Writer, in InputMediaAudio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"media\":"
		out.RawString(prefix)
		out.String(string(in.Media))
	}
	if in.Thumb != nil {
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		out.String(string(*in.Thumb))
	}
	if in.Caption != nil {
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(*in.Caption))
	}
	if in.ParseMode != nil {
		const prefix string = ",\"parse_mode\":"
		out.RawString(prefix)
		out.String(string(*in.ParseMode))
	}
	if in.Duration != nil {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(*in.Duration))
	}
	if in.Performer != nil {
		const prefix string = ",\"performer\":"
		out.RawString(prefix)
		out.String(string(*in.Performer))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(*in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMediaAudio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMediaAudio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson73a966c4EncodeTelegramSplatoon2BotServiceBotModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMediaAudio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMediaAudio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson73a966c4DecodeTelegramSplatoon2BotServiceBotModel3(l, v)
}
